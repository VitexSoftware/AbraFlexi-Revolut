{
    "image": "data:image\/svg+xml;base64,",
    "name": "AbraFlexi Revolut statements import",
    "description": "Import Revolut bank statemetnts into AbraFlexi",
    "executable": "abraflexi-revolut-csv-import",
    "setup": "abraflexi-revolut-setup",
    "cmdparams": "{REVOLUT_CSV}",
    "deploy": "apt install abraflexi-revolut",
    "homepage": "https:\/\/github.com\/VitexSoftware\/AbraFlexi-Revolut",
    "ociimage": "docker.io\/vitexsoftware\/abraflexi-revolut",
    "requirements": "AbraFlexi",
    "environment": {
        "ABRAFLEXI_COMPANY": {
            "type": "string",
            "description": "",
            "defval": "demo_de",
            "required": true
        },
        "ABRAFLEXI_LOGIN": {
            "type": "string",
            "description": "AbraFlexi Login",
            "defval": "winstrom",
            "required": true
        },
        "ABRAFLEXI_PASSWORD": {
            "type": "string",
            "description": "AbraFlexi password",
            "defval": "winstrom",
            "required": true
        },
        "ABRAFLEXI_URL": {
            "type": "string",
            "description": "AbraFlexi Server URI",
            "defval": "https:\/\/demo.flexibee.eu:5434",
            "required": true
        },
        "ACCOUNT_IBAN": {
            "type": "string",
            "description": "Revolut IBAN",
            "defval": "",
            "required": true
        },
        "REVOLUT_CSV": {
            "type": "file",
            "description": "Excel statements csv file",
            "defval": "",
            "required": true
        }
    },
    "multiflexi": "1.7.2.187"
}
